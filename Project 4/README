
---------------------
| EXECUTION DETAILS |
---------------------

1. We have assumed root privileges on the system.
2. Makefile will make the code executable and execute the command "iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP" to set a rule in  iptables that drops outgoing TCP RST packets. As we are implementing rawsockets, the kernel has no idea about the port number where the TCP packet will be received and it will send a TCP RST to halt the communication. 
3. Command to run the program ./rawhttpget <url>

----------------
| DESCRIPTION  |
----------------

1. The goal of writing this program is to familiarize with low level operations of TCP/IP stack.  
2. This program creates and manages the IP and TCP headers for every packets. In short we are rebuilding the TCP/IP stack in our application.
3. We have implemented the Ethernet frames for extra credit

-----------------
| REQUIREMENTS  |
-----------------

1. Python 2.7
2. Ubuntu 12.04 OS with root privilege
3. Ethernet cable (This program does not support Wi-Fi or 3G protocol)
4. tcpdump/Wireshark (For debugging and testing)

------------------------
| HIGH LEVEL APPROACH  |
------------------------

1. Started by writing a simple python code to accept a URL from user, parse it using "urlparse", build a http 1.1 header, send it to network location, receive the file content and store it in a file in the programs directory. In this step we did not create rawsockets as we just wanted to test the basic application level interaction and functionality of the program.
2. After correctly executing the code by performing only application level analysis, we moved onto learning the basics of creating IP and TCP headers in python from the tutorial provided. 
3. Implemented TCP and IP stack by building headers from scratch and implemented each of its specific features. We initally wrote a separate program to only send one syn packet and observe it using tcpdump. Eventually we moved forward.
4. After the initial 3 way handshake the request is sent by the program. Then we filtered the incoming packets related to only our program. The end of TCP session is marked by fin packet sent at the end.
5. The program builts an ARP packet after calculating the source IP and MAC address and gateway IP address.Gateway MAC address is obtained after broadcasting the ARP packet.
6. Program continues to run till the file is downloaded and stored in the current directory of program.
7. To check the integrity of the data we used md5sum <filename> to calculate the hash of file and verified the it with the hash of file obtained after using wget to download the same file.

-------------------------------
| TCP/IP FEATURES IMPLEMENTED |
-------------------------------

TCP Features
1. Verification for checksum for incoming packet and calculates correct checksum for outgoing packet.
2. Performs three-way handshake using SYN, SYN-ACK and ACK.
3. Correctly handles sequence and acknowledgement numbers for the 3 way handshake in order to establish connection with the server.
4. Timeout functionality to restransmit a packet if the acknowledgmemt number is not received within 60 seconds.
5. Re-ordering of received packets.
6. Implements congestion control by using the congestion window of size 1 and increments it upto 1000.
7. Waits for 180 seconds to receive a data before assuming that the connection is failed.

IP Features
1. Set correct version, header length, total length, protocol identifier, checksum for outgoing packets and validate checkdum for incoming packets.
2. Set correct source and destination IP address.
3. Validate IP Headers such as checksum, protocol and other contents in IP packets received from remote server.

---------------------
| CHALLENGES FACED  |
---------------------
1. The main challenge was debugging the code and find the errors in our program. We started by using passive sniffer Wireshark but then moved on to tcpdump as we found it more direct and useful.
2. Understanding the little endian and big endian concepts and its conversion.
3. HTTP 1.1 supports chunked encoding. Hence it was a challenge to understand and implement this concept.
4. Calculating the checksum in the TCP part and sending correct sequence and acknowledgment number.
5. Implementing the bonus for creating and sending ARP packets where we had the create ARP header.
6. Broadcasting the ARP packet and finding MAC address of gateway was tough and understand the concept of padding bytes at the end of ethernet frame.
7. Sending and receiving correct sequence number was very difficult as well.

-------------------------
| STUDENT CONTRIBUTION  |
-------------------------

Manu worked on
1. Buidling the TCP headers.
2. Performing 3 way handshake, calculating the checksum and verifying it for incoming and outgoing packets.
3. Checking for correct sequence and acknowledgement number and re ordering of packets.
4. Building ARP packet by understanding the ARP headers and its values and working for the same.

Sarvesh worked on
1. Writing http code by sending GET request to website and receiving the file to store it in the current directory.
2. Implement IP packet and calculating the source and destination IP address.
3. Filtering packets only related to our program.
4. Broadcast ARP packet, calculate MAC address of gateway and little endian and big endian conversion.
